openapi: 3.0.0
info:
  title: Gamersmart Gaming Store API
  description: Complete API for a gaming store with user management, game catalog, shopping cart, orders, payments, and reviews
  version: 1.0.0
  contact:
    name: Gamersmart Support
    email: support@gamersmart.com

servers:
  - url: https://api.gamersmart.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [user, admin]
          default: user
        verified:
          type: boolean
          default: false
        phoneNumber:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Game:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "The Legend of Zelda"
        slug:
          type: string
          example: "the-legend-of-zelda"
        description:
          type: string
          example: "An epic adventure game"
        shortDescription:
          type: string
          example: "Epic adventure awaits"
        price:
          type: number
          example: 59.99
        discount:
          type: number
          default: 0
          example: 10
        discountPrice:
          type: number
          example: 53.99
        releaseDate:
          type: string
          format: date
        image:
          type: string
          example: "https://cloudinary.com/image.jpg"
        images:
          type: array
          items:
            type: string
        availability:
          type: string
          enum: [available, pre-order, out-of-stock, discontinued]
          default: available
        stock:
          type: object
          properties:
            quantity:
              type: number
              minimum: 0
              default: 0
            unlimited:
              type: boolean
              default: true
        isActive:
          type: boolean
          default: true
        reviews:
          type: object
          properties:
            count:
              type: number
              default: 0
            averageRating:
              type: number
              minimum: 0
              maximum: 5
              default: 0
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        totalAmount:
          type: number
          minimum: 0
          default: 0
        status:
          type: string
          enum: [active, checkout, completed, abandoned]
          default: active
        totalItems:
          type: number
          minimum: 0
          default: 0
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        cart:
          type: string
          example: "507f1f77bcf86cd799439011"
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        game:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            price:
              type: number
            discount:
              type: number
            image:
              type: string
            slug:
              type: string
        quantity:
          type: number
          minimum: 1
          default: 1
        price:
          type: number
          minimum: 0
        addedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        orderNumber:
          type: string
          example: "ORD-1640995200000-001"
        items:
          type: array
          items:
            type: object
            properties:
              game:
                type: string
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                example: "The Legend of Zelda"
              price:
                type: number
                example: 59.99
              quantity:
                type: number
                example: 1
              subtotal:
                type: number
                example: 59.99
        totalAmount:
          type: number
          minimum: 0
        totalItems:
          type: number
          minimum: 1
        status:
          type: string
          enum: [pending, processing, completed, cancelled]
          default: pending
        shippingAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
            country:
              type: string
              default: "NG"
        paymentMethod:
          type: string
          enum: [card, paypal, bank_transfer, flutterwave]
          default: flutterwave
        paymentStatus:
          type: string
          enum: [pending, paid, failed]
          default: pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        order:
          type: string
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          minimum: 0
        currency:
          type: string
          default: "NGN"
        paymentReference:
          type: string
          example: "tx_1640995200000_abc123"
        transactionId:
          type: string
          nullable: true
        paymentMethod:
          type: string
          enum: [card, bank_transfer, ussd, qr]
        status:
          type: string
          enum: [pending, successful, failed, cancelled]
          default: pending
        gateway:
          type: string
          default: flutterwave
        paidAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        user:
          type: string
          example: "507f1f77bcf86cd799439011"
        game:
          type: string
          example: "507f1f77bcf86cd799439011"
        content:
          type: string
          example: "Great game! Highly recommended."
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 5
        isEdited:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    PaginatedResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            results:
              type: number
            currentPage:
              type: number
            totalPages:
              type: number

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [fail, error]
        message:
          type: string

security:
  - BearerAuth: []

paths:
  # Authentication Routes
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - username
                - email
                - password
              properties:
                firstname:
                  type: string
                  minLength: 3
                  example: "John"
                lastname:
                  type: string
                  minLength: 3
                  example: "Doe"
                username:
                  type: string
                  minLength: 3
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
                  example: "Password123!"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      token:
                        type: string
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
        "409":
          description: User already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      token:
                        type: string
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Invalid credentials

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      responses:
        "200":
          description: Logout successful

  /auth/send-verification-code:
    patch:
      tags:
        - Authentication
      summary: Send email verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Verification code sent
        "404":
          description: User not found

  /auth/verify-verification-code:
    patch:
      tags:
        - Authentication
      summary: Verify email with code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                emailCode:
                  type: number
      responses:
        "200":
          description: Account verified
        "400":
          description: Invalid or expired code

  /auth/send-forgot-password-code:
    patch:
      tags:
        - Authentication
      summary: Send password reset code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Reset code sent
        "404":
          description: User not found

  /auth/verify-forgot-password-code:
    patch:
      tags:
        - Authentication
      summary: Reset password with code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                emailCode:
                  type: number
                newPassword:
                  type: string
      responses:
        "200":
          description: Password updated
        "400":
          description: Invalid or expired code

  # User Routes
  /user/get-profile:
    get:
      tags:
        - User
      summary: Get user profile
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"

  /user/update-profile:
    put:
      tags:
        - User
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  minLength: 3
                lastname:
                  type: string
                  minLength: 3
                username:
                  type: string
                  minLength: 3
      responses:
        "200":
          description: Profile updated successfully

  /user/update-password:
    patch:
      tags:
        - User
      summary: Update user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                confirmPassword:
                  type: string
      responses:
        "200":
          description: Password updated successfully

  # Game Routes
  /games:
    get:
      tags:
        - Games
      summary: Get all games with filtering and pagination
      security: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search games by title or description
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
        - name: sort
          in: query
          schema:
            type: string
          description: Sort by field (e.g., -createdAt, price)
        - name: fields
          in: query
          schema:
            type: string
          description: Select specific fields
        - name: price[gte]
          in: query
          schema:
            type: number
          description: Price greater than or equal to
        - name: price[lte]
          in: query
          schema:
            type: number
          description: Price less than or equal to
      responses:
        "200":
          description: Games retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Game"

    post:
      tags:
        - Games
      summary: Create a new game (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - shortDescription
                - price
                - releaseDate
                - stock
                - image
              properties:
                name:
                  type: string
                  maxLength: 50
                description:
                  type: string
                shortDescription:
                  type: string
                  maxLength: 100
                price:
                  type: number
                discount:
                  type: number
                  minimum: 0
                  maximum: 100
                releaseDate:
                  type: string
                  format: date
                stock:
                  type: object
                  properties:
                    quantity:
                      type: number
                      minimum: 0
                      maximum: 100
                    unlimited:
                      type: boolean
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Game created successfully
        "400":
          description: Invalid input or game already exists

  /games/{id}:
    get:
      tags:
        - Games
      summary: Get game by ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Game ID
      responses:
        "200":
          description: Game retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Game"
        "404":
          description: Game not found

    put:
      tags:
        - Games
      summary: Update game (Owner or Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
                description:
                  type: string
                shortDescription:
                  type: string
                  maxLength: 100
                price:
                  type: number
                discount:
                  type: number
                  minimum: 0
                  maximum: 100
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Game updated successfully
        "403":
          description: Not authorized to update this game

    delete:
      tags:
        - Games
      summary: Delete game (Owner or Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Game deleted successfully
        "403":
          description: Not authorized to delete this game

  /games/slug/{slug}:
    get:
      tags:
        - Games
      summary: Get game by slug
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Game slug
      responses:
        "200":
          description: Game retrieved successfully
        "404":
          description: Game not found

  # Cart Routes
  /cart:
    get:
      tags:
        - Cart
      summary: Get user's cart
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          cart:
                            $ref: "#/components/schemas/Cart"

  /cart/add:
    post:
      tags:
        - Cart
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - gameId
              properties:
                gameId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  default: 1
      responses:
        "200":
          description: Item added to cart successfully
        "400":
          description: Invalid input or insufficient stock

  /cart/update/{id}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Cart item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 1000
      responses:
        "200":
          description: Cart updated successfully
        "400":
          description: Invalid quantity or insufficient stock

  /cart/remove/{id}:
    delete:
      tags:
        - Cart
      summary: Remove item from cart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Cart item ID
      responses:
        "200":
          description: Item removed successfully
        "404":
          description: Item not found

  /cart/clear:
    delete:
      tags:
        - Cart
      summary: Clear entire cart
      responses:
        "200":
          description: Cart cleared successfully

  # Order Routes
  /order:
    get:
      tags:
        - Orders
      summary: Get user's orders with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"

    post:
      tags:
        - Orders
      summary: Create order from cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shippingAddress
                - paymentMethod
              properties:
                shippingAddress:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
                    country:
                      type: string
                paymentMethod:
                  type: string
                  enum: [card, paypal, bank_transfer]
      responses:
        "201":
          description: Order created successfully
        "400":
          description: Cart is empty or invalid data

  /order/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Order"

    put:
      tags:
        - Orders
      summary: Cancel order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order cancelled successfully
        "400":
          description: Cannot cancel this order

  # Payment Routes
  /payment/initialize:
    post:
      tags:
        - Payments
      summary: Initialize payment for order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: Payment initialized successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          paymentUrl:
                            type: string
                          refrence:
                            type: string
                          paymentId:
                            type: string

  /payment/callback:
    get:
      tags:
        - Payments
      summary: Verify payment callback
      parameters:
        - name: transaction_id
          in: query
          schema:
            type: string
        - name: tx_ref
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Payment verified successfully

  /payment/webhook:
    post:
      tags:
        - Payments
      summary: Handle payment webhook
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Webhook processed

  /payment/history:
    get:
      tags:
        - Payments
      summary: Get payment history
      responses:
        "200":
          description: Payment history retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Payment"

  # Review Routes
  /review/{id}:
    get:
      tags:
        - Reviews
      summary: Get all reviews for a game
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Game ID
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Review"

    post:
      tags:
        - Reviews
      summary: Create a review for a game
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Game ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - rating
              properties:
                content:
                  type: string
                  maxLength: 1000
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
      responses:
        "201":
          description: Review created successfully

    put:
      tags:
        - Reviews
      summary: Update a review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Review ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  maxLength: 1000
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
      responses:
        "200":
          description: Review updated successfully

    delete:
      tags:
        - Reviews
      summary: Delete a review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Review ID
      responses:
        "204":
          description: Review deleted successfully

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: User
    description: User profile management
  - name: Games
    description: Game catalog management
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order management
  - name: Payments
    description: Payment processing with Flutterwave
  - name: Reviews
    description: Game reviews and ratings
